import { GameClient, IParticipant } from "beam-interactive-node2";
import { Event } from "./common/utils/Event";
import { InteractiveScene } from "./InteractiveScene";
import { InteractiveUser } from "./InteractiveUser";
import { InteractiveGroup } from "./InteractiveGroup";
export declare class InteractiveWrapper {
    readonly client: GameClient | undefined;
    readonly defaultScene: InteractiveScene;
    readonly defaultGroup: InteractiveGroup;
    private sceneMap;
    private groupMap;
    private sessionMap;
    private userMap;
    private userIDMap;
    readonly onInit: Event<() => void>;
    readonly onReady: Event<() => void>;
    readonly onUserJoin: Event<(user: InteractiveUser) => void>;
    readonly onUserLeave: Event<(user: InteractiveUser) => void>;
    readonly onStop: Event<() => void>;
    private interval;
    authToken: string;
    versionID: number;
    sharecode: string | undefined;
    constructor(authToken: string, versionID: number, sharecode?: string);
    private tempScenes;
    private tempScenesCount;
    addScene(scene: InteractiveScene): Promise<void>;
    removeScene(scene: InteractiveScene): Promise<void>;
    getScene(name: string): InteractiveScene;
    private tempGroups;
    private tempGroupsCount;
    addGroup(group: InteractiveGroup): Promise<void>;
    removeGroup(group: InteractiveGroup): Promise<void>;
    moveGroup(group: InteractiveGroup, scene: InteractiveScene): Promise<void>;
    getGroup(name: string): InteractiveGroup;
    moveUsers(users: InteractiveUser[], group: InteractiveGroup, currentTry?: number): Promise<void>;
    findUser(username: string): InteractiveUser;
    getUser(participant: IParticipant): InteractiveUser;
    private clockDelta;
    readonly now: number;
    /**********************************************************************/
    private scenesInitialized;
    private groupsInitialized;
    private beamInit;
    private loggingEnabled;
    enableLogging(): void;
    disableLogging(): void;
    static logMessage(message: any): void;
    static logSend(message: any): void;
    start(): Promise<void>;
    stop(): void;
    update(): void;
    private createScene;
    private deleteScene;
    private createGroup;
    private updateGroup;
    private deleteGroup;
}
